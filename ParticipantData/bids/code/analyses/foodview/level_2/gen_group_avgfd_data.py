#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script generates a dataset with average framewise displacement data for all participants with avg-fd files, generated by level_1/gen_regressor_file.py. 

@author: baf44
"""
# for testing locally:
# -d "/Users/bari/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/b-childfoodlab_Shared/Active_Studies/MarketingResilienceRO1_8242020/ParticipantData/bids"

#set up packages    
import os
from pathlib import Path
import pandas as pd

# for debugging
analysis_dir = "/Users/baf44/projects/Keller_Marketing/ParticipantData/bids/derivatives/analyses/foodview"
overwrite = True

def gen_group_avg_data(analysis_dir, overwrite = False):
    """
    This functions generates a dataset with average framewise displacement data for all participants with avg-fd files, generated by level_1/gen_regressor_file.py. 

    Inputs:
        analysis_dir (str) - path to output directory in bids/derivatives/analyses
        overwrite (boolean) - specify if output file should be overwritten (default = False)

    Exports:
        fd-avgs.tsv: TSV with average censor data compiled for all participants
    """
    # get list of average framewise displacement
    sub_files = list(Path(analysis_dir).rglob('level_1/sub*/*avg-fd*.tsv'))

    # initialize list to save subject dataframes to
    dataframe_list = []

    # create list of dataframes with subject data
    for file_path in sub_files:

        # extract file basename
        file_name = file_path.name

        #load subject's data as a dataframe
        sub_data = pd.read_csv(str(file_path), sep = '\t', encoding = 'utf-8-sig', engine='python')

        ## append dataframe to list
        dataframe_list.append(sub_data)

    # concatenate all dataframes into a single dataframes
    group_data = pd.concat(dataframe_list, ignore_index=True)

    # Make directory for export 
    Path(os.path.join(analysis_dir, 'level_2')).mkdir(parents=True, exist_ok=True)

    # define output file path
    file_name = Path(os.path.join(analysis_dir, 'level_2', 'fd-avgs.tsv'))

    # export if doesnt exist or overwrite is True
    if not file_name.exists() or overwrite:
        print('Exporting level_2/fd-avgs.tsv')
        group_data.to_csv(str(file_name), sep = '\t', encoding='ascii', index = False, header=True)
    else:
        print('level_2/fd-avgs.tsv exists. Use overwrite = True to overwrite')